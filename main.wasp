app NanoStudio {
	wasp: {
		version: "^0.17.1"
	},
	title: "Nano Studio",
	head: [
		"<link rel='icon' type='image/svg+xml' href='/logo.svg' />",
	],
	auth: {
		userEntity: Users,
		methods: {
			// email: {
			// 	fromField: {
			// 		name: "NanoStudio",
			// 		email: "noreply@nanostudio.com"
			// 	},
			// 	emailVerification: {
			// 		clientRoute: EmailVerificationRoute,
			// 		getEmailContentFn: import { getVerificationEmailContent } from "@src/server/auth/email",
			// 	},
			// 	passwordReset: {
			// 		clientRoute: PasswordResetRoute,
			// 		getEmailContentFn: import { getPasswordResetEmailContent } from "@src/server/auth/email",
			// 	},
			// 	userSignupFields: import { getEmailUserFields } from "@src/client/pages/auth/user-signup-fields",
			// },
			google: {
				configFn: import { getConfig } from "@src/server/auth/google",
				userSignupFields: import { userSignupFields } from "@src/server/auth/google"
			}
		},
		onAuthFailedRedirectTo: "/signin",
		onAuthSucceededRedirectTo: "/dashboard"
	},
	// emailSender: {
	// 	provider: Dummy,
	// 	defaultFrom: {
	// 		name: "Nano Studio",
	// 		email: "me@example.com"
    // 	},
	// }
}

// Google-only Sign In Page (active)
route GoogleSignInPageRoute { path: "/signin", to: GoogleSignInPage }
page GoogleSignInPage {
  component: import { GoogleSignInPage } from "@src/client/pages/auth/google-sign-in"
}

// Traditional Auth Pages (disabled - uncomment to re-enable)
route SignUpPageRoute { path: "/signup", to: SignUpPage }
page SignUpPage {
  component: import { GoogleSignInPage } from "@src/client/pages/auth/google-sign-in"
//   component: import { SignUpPage } from "@src/client/pages/auth/sign-up"
}

// route SignInPageRoute { path: "/signin", to: SignInPage }
// page SignInPage {
//   component: import { SignInPage } from "@src/client/pages/auth/sign-in"
// }

// route ForgotPasswordRoute { path: "/forgot-password", to: ForgotPasswordPage }
// page ForgotPasswordPage {
//   component: import { ForgotPasswordPage } from "@src/client/pages/auth/forgot-password"
// }

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordResetPage } from "@src/client/pages/auth/password-reset"
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerificationPage } from "@src/client/pages/auth/email-verification"
}

route LandingPageRoute { path: "/", to: LandingPage }
page LandingPage {
  component: import { LandingPage } from "@src/client/pages/landing/landing-page"
}

route DashboardPageRoute { path: "/dashboard", to: DashboardPage }
page DashboardPage {
	authRequired: true,
	component: import { DashboardPage } from "@src/client/pages/dashboard/dashboard"
}

route SubscriptionManagementRoute { path: "/subscription", to: SubscriptionManagementPage }
page SubscriptionManagementPage {
	authRequired: true,
	component: import SubscriptionManagementPage from "@src/client/pages/subscriptions/subscription-management"
}

route CheckoutPageRoute { path: "/checkout", to: CheckoutPage }
page CheckoutPage {
	component: import CheckoutPage from "@src/server/payment/checkout-page"
}

route CookiePolicyRoute { path: "/cookie-policy", to: CookiePolicyPage }
page CookiePolicyPage {
	component: import { CookiePolicyPage } from "@src/client/pages/legal/cookie-policy"
}

query generateTextToImage {
	fn: import { generateTextToImage } from "@src/server/image/image-operations",
	entities: [Users]
}

query generateImageToImage {
	fn: import { generateImageToImage } from "@src/server/image/image-operations",
	entities: [Users]
}

action generateImageWithGemini {
	fn: import { generateImage } from "@src/server/gemini/gemini-service-operations",
	entities: [Users, Image]
}

action generatePresignedUploadUrl {
	fn: import { generatePresignedUploadUrl } from "@src/server/image/upload-operations",
	entities: [Users, Image]
}

action confirmImageUpload {
	fn: import { confirmImageUpload } from "@src/server/image/upload-operations",
	entities: [Users, Image]
}

action editImageFromGCS {
	fn: import { editImageFromGCS } from "@src/server/gemini/gemini-service-operations",
	entities: [Users, Image]
}

// Image management
query getUserImages {
	fn: import { getUserImages } from "@src/server/image/image-queries",
	entities: [Users, Image]
}

query getImageById {
	fn: import { getImageById } from "@src/server/image/image-queries",
	entities: [Users, Image]
}

// Payment operations
action generateCheckoutSession {
	fn: import { generateCheckoutSession } from "@src/server/payment/operations",
	entities: [Users]
}

query getCustomerPortalUrl {
	fn: import { getCustomerPortalUrl } from "@src/server/payment/operations",
	entities: [Users]
}

query getLaunchSettings {
	fn: import { getLaunchSettings } from "@src/server/launch-settings"
}

query getCurrentUserSubscription {
	fn: import { getCurrentUserSubscription } from "@src/user/user-operations",
	entities: [Users]
}

action syncUserSubscription {
	fn: import { syncUserSubscription } from "@src/server/payment/operations",
	entities: [Users]
}

// Credits Management
query getCurrentUserCredits {
	fn: import { getCurrentUserCredits } from "@src/server/credits/credits-queries",
	entities: [Users]
}

query checkUserCredits {
	fn: import { checkUserCredits } from "@src/server/credits/credits-queries",
	entities: [Users]
}

query getAllPlanCredits {
	fn: import { getAllPlanCredits } from "@src/server/credits/credits-queries"
}

action consumeUserCredits {
	fn: import { consumeUserCredits } from "@src/server/credits/credits-queries",
	entities: [Users]
}

action syncUserCredits {
	fn: import { syncUserCredits } from "@src/server/credits/credits-queries",
	entities: [Users]
}

action addCreditsToUser {
	fn: import { addCreditsToUser } from "@src/server/credits/credits-queries",
	entities: [Users]
}

// Stripe webhook
api paymentsWebhook {
	fn: import { stripeWebhook } from "@src/server/payment/stripe/webhook",
	middlewareConfigFn: import { stripeMiddlewareConfigFn } from "@src/server/payment/stripe/webhook",
	entities: [Users],
	httpRoute: (POST, "/payments-webhook")
}